package com.insecurity.Controller;

import com.insecurity.model.Vulnerability;
import com.insecurity.service.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/vulnerabilities")
public class VulnerabilityController {
    @Autowired
    private VulnerabilityService vulnerabilityService;

    @GetMapping
    public List<Vulnerability> getAllVulnerabilities() {
        return vulnerabilityService.getAllVulnerabilities();
    }

    @GetMapping("/id/{id}")
    public ResponseEntity<Vulnerability> getVulnerabilityById(@PathVariable Long id) {
        Optional<Vulnerability> vulnerability = vulnerabilityService.getVulnerabilityById(id);
        return vulnerability.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping("/create")
    public Vulnerability createVulnerability(@RequestBody Vulnerability vulnerability) {
        return vulnerabilityService.createVulnerability(vulnerability);
    }

    @PutMapping("/update/{id}")
    public ResponseEntity<Vulnerability> updateVulnerability(@PathVariable Long id, @RequestBody Vulnerability vulnerabilityDetails) {
        Vulnerability updatedVulnerability = vulnerabilityService.updateVulnerability(id, vulnerabilityDetails);
        return ResponseEntity.ok(updatedVulnerability);
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<Void> deleteVulnerability(@PathVariable Long id) {
        vulnerabilityService.deleteVulnerability(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/severity/{severity}")
    public List<Vulnerability> getVulnerabilitiesBySeverity(@PathVariable String severity) {
        return vulnerabilityService.getVulnerabilitiesBySeverity(severity);
    }

    @GetMapping("/status/{status}")
    public List<Vulnerability> getVulnerabilitiesByStatus(@PathVariable String status) {
        return vulnerabilityService.getVulnerabilitiesByStatus(status);
    }

    @GetMapping("/asset/{assetId}")
    public List<Vulnerability> getVulnerabilitiesByAsset(@PathVariable Long assetId) {
        return vulnerabilityService.getVulnerabilitiesByAsset(assetId);
    }
}
